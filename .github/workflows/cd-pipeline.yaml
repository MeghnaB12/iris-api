name: CML Iris API Deployment

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy-iris-api:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      IMAGE_NAME: iris-api

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python and install dependencies
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install scikit-learn cml dvc

      # Train model
      - name: Train model and save artifact
        run: |
          python train.py

      # CML Report (Optional)
      - name: Create CML report
        run: |
          echo "## Iris Model Report" > report.md
          echo "\nModel trained successfully on $(date)" >> report.md
          cml comment create report.md || echo "CML comment skipped"

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate Docker to GCR
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      # Build and push Docker image to GCR
      - name: Build & Push Docker Image
        run: |
          docker build -t gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:latest .
          docker push gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:latest

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Connect to GKE
      - name: Authenticate to GKE
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

      # Deploy to GKE
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
